# -*- coding: utf-8 -*-
"""real.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eMPGu9snzxOBHx9bjJ1sOHy5Tnpz6RsO
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install flask_ngrok

!pip install flask_cors

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import tensorflow as tf

import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers import Dense, Activation, Dropout, Flatten

from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
label_map = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

from keras.models import Sequential
from keras.layers import Dense , Activation , Dropout ,Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.metrics import categorical_accuracy
from keras.models import model_from_json
from keras.callbacks import ModelCheckpoint
from keras.optimizers import *
from keras.layers.normalization import BatchNormalization
import cv2 
from skimage import io

def my_model():
    model = Sequential()
    input_shape = (48,48,1)
    model.add(Conv2D(64, (5, 5), input_shape=input_shape,activation='relu', padding='same'))
    model.add(Conv2D(64, (5, 5), activation='relu', padding='same'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(128, (5, 5),activation='relu',padding='same'))
    model.add(Conv2D(128, (5, 5),activation='relu',padding='same'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Conv2D(256, (3, 3),activation='relu',padding='same'))
    model.add(Conv2D(256, (3, 3),activation='relu',padding='same'))
    model.add(BatchNormalization())
    model.add(MaxPooling2D(pool_size=(2, 2)))

    model.add(Flatten())
    model.add(Dense(128))
    model.add(BatchNormalization())
    model.add(Activation('relu'))
    model.add(Dropout(0.2))
    model.add(Dense(7))
    model.add(Activation('softmax'))
    
    model.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer='adam')
    # UNCOMMENT THIS TO VIEW THE ARCHITECTURE
    #model.summary()
    
    return model
model=my_model()
model.summary()
model.load_weights('/content/drive/My Drive/Igris/model_filter.h5')

def takePictures(path):
  # Read the video from specified path 
  cam = cv2.VideoCapture(path) 
    
  try: 
        
      # creating a folder named data 
      if not os.path.exists('data'): 
          os.makedirs('data') 
    
  # if not created then raise error 
  except OSError: 
      print ('Error: Creating directory of data') 
    
  # frame 
  currentframe = 0
    
  while(True): 
        
      # reading from frame 
      ret,frame = cam.read() 
    
      if ret: 
          # if video is still left continue creating images 
          name = '/content/data/frame' + str(currentframe) + '.jpg'
    
          # writing the extracted images 
          cv2.imwrite(name, frame) 
    
          # increasing counter so that it will 
          # show how many frames are created 
          currentframe += 1
      else: 
          break
    
  # Release all space and windows once done 
  cam.release() 
  cv2.destroyAllWindows()
  return currentframe

plotter =[]
def useModel(count):
  for j in range(0, count):
    path = '/content/data/frame' + str(j) + '.jpg'
    img = image.load_img(path, grayscale=True, target_size=(48, 48))
    show_img=image.load_img(path, grayscale=False, target_size=(200, 200))
    plt.imshow(show_img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis = 0)
    print(j)

    x /= 255

    custom = model.predict(x)

    x = np.array(x, 'float32')
    x = x.reshape([48, 48]);

    plt.gray()
    plt.imshow(show_img)
    plt.show()

    m=0.000000000000000000001
    a=custom[0]
    confidence=[]
    for i in range(0,len(a)):
      confidence.append(a[i])
      if a[i]>m:
          m=a[i]
          ind=i
    plotter.append(confidence)  
    print('Expression Prediction:', label_map[ind])
  return "ok"



import os
from flask_ngrok import run_with_ngrok
from flask import Flask, flash, request, redirect, url_for, session, jsonify
from werkzeug.utils import secure_filename
from flask_cors import CORS, cross_origin
import logging


logging.basicConfig(level=logging.INFO)

logger = logging.getLogger('HELLO WORLD')

app = Flask(__name__)
CORS(app)
run_with_ngrok(app)

@app.route('/video', methods=['POST'])
def fileUpload():
    logger.info("welcome to upload`")
    print(request)
    file = request.files['mp4video'] 
    vid = open("/content/drive/My Drive/Igris/file.mp4", "wb")
    video_stream = request.files['mp4video'].read()
    vid.write(video_stream)
    vid.close()
    count = takePictures("/content/drive/My Drive/Igris/file.mp4")
    print("Count", count)
    ok = useModel(count)
    return jsonify({"response" : count, "second_response" : ok})

if __name__ == "__main__":
    app.run()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
import matplotlib.pyplot as plt
y1=[10,20,30,40,50,60,70,80,90,100]
for i in plotter:
  plt.plot(i,y1,label= 'line1')
  plt.show()